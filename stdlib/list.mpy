class List:
    def __init__(self):
        self.list = raw_list()
    #end

    def append(self, item):
        self.list.__append__(item)
    #end

    def insert(self, index, item):
        self.list.__insert__(item, index)
    #end

    def get(self, index):
        return self.list.__get__(index)
    #end

    def set(self, index, item):
        self.removeIndex(index)
        if len(self) == 0:
            self.append(item)
        else:
            self.insert(index-1, item)
        #end
    #end

    def __len__(self):
        return self.list.__len__()
    #end

    def removeIndex(self, index):
        self.list.__remove__(index)
    #end

    def removeItem(self, item):
        index = 0
        while index < len(self):
            element = self.get(index)
            if element == item:
                self.removeIndex(index)
                return element
            #end
            index++
        #end
    #end

    def pop(self):
        element = self.get(len(self)-1)
        self.removeIndex(len(self)-1)
        return element
    #end

    def clear(self):
        while(len(self) > 0):
            self.pop()
        #end
    #end

    def index(self, item):
        index = 0
        while index < len(self):
            element = self.get(index)
            if element == item:
                return index
            #end
            index++
        #end
    #end

    def count(self, item):
        index = 0
        amount = 0
        while index < len(self):
            element = self.get(index)
            if element == item:
                amount++
            #end
            index++
        #end
        return amount
    #end

    def copy(self):
        new_list = List()
        index = 0
        while index < len(self):
            element = self.get(index)
            new_list.append(element)
            index++
        #end
        return new_list
    #end

    def __str__(self):
        string = "[ "
        index = 0
        while index < len(self):
            element = self.get(index)
            print(element)
            string = string + element.__str__() + " "
            index++
        #end
        string = string + "]"
        return string
    #end

    def filter(self, filter_func):
        new_list = List()
        index = 0
        while index < len(self):
            element = self.get(index)
            if filter_func(element):
                new_list.append(element)
            #end
            index++
        #end
        return new_list
    #end

    def map(self, map_func):
        new_list = List()
        index = 0
        while index < len(self):
            element = self.get(index)
            new_list.append(map_func(element))
            index++
        #end
        return new_list
    #end

    def reduce(self, reduce_func):
        left_element = self.get(0)
        index = 1
        while index < len(self):
            right_element = self.get(index)
            left_element = reduce_func(left_element, right_element)
            index++
        #end
        return left_element
    #end
#end

def filter(filter_func, list):
        new_list = List()
        index = 0
        while index < len(list):
            element = list.get(index)
            if filter_func(element):
                new_list.append(element)
            #end
            index++
        #end
        return new_list
    #end

    def map(map_func, list):
        new_list = List()
        index = 0
        while index < len(list):
            element = list.get(index)
            new_list.append(map_func(element))
            index++
        #end
        return new_list
    #end

    def reduce(reduce_func, list):
        left_element = list.get(0)
        index = 1
        while index < len(list):
            right_element = list.get(index)
            left_element = reduce_func(left_element, right_element)
            index++
        #end
        return left_element
    #end
